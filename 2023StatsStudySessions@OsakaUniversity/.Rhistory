# havenパッケージを読み込みます。havenパッケージは、SPSS、Stata、SASといった統計ソフトウェアのデータファイルをRで読み込むためのパッケージです。
library(haven)
# SASファイルのパスを取得します。system.file関数は、Rのパッケージに同梱されたファイルのパスを取得するために用います。
# "extdata"はhavenパッケージ内のディレクトリ名、"example.sas7bdat"はそのディレクトリ内のSASファイル名、package = "haven"はパッケージ名を指定しています。
path <- system.file("extdata", "example.sas7bdat", package = "haven")
# read_sas関数を使ってSASファイルを読み込みます。この関数は、SASファイルのパスを引数に取り、そのファイルをRのデータフレームとして読み込みます。
data <- read_sas(path)
setwd("~/Dropbox/My Teaching/統計勉強会@大阪大学")
# havenパッケージを読み込みます。havenパッケージは、SPSS、Stata、SASといった統計ソフトウェアのデータファイルをRで読み込むためのパッケージです。
library(haven)
# SASファイルのパスを取得します。system.file関数は、Rのパッケージに同梱されたファイルのパスを取得するために用います。
# "extdata"はhavenパッケージ内のディレクトリ名、"example.sas7bdat"はそのディレクトリ内のSASファイル名、package = "haven"はパッケージ名を指定しています。
path <- system.file("extdata", "example.sas7bdat", package = "haven")
# read_sas関数を使ってSASファイルを読み込みます。この関数は、SASファイルのパスを引数に取り、そのファイルをRのデータフレームとして読み込みます。
data <- read_sas(path)
# havenパッケージを読み込みます。havenパッケージは、SPSS、Stata、SASといった統計ソフトウェアのデータファイルをRで読み込むためのパッケージです。
library(haven)
# SASファイルのパスを取得します。system.file関数は、Rのパッケージに同梱されたファイルのパスを取得するために用います。
# "extdata"はhavenパッケージ内のディレクトリ名、"example.sas7bdat"はそのディレクトリ内のSASファイル名、package = "haven"はパッケージ名を指定しています。
path <- system.file("extdata", "example.sas7bdat", package = "haven")
# havenパッケージをインストール（初めての場合）
install.packages("haven")
# havenパッケージを読み込みます
library(haven)
install.packages("haven")
# havenパッケージをインストール（初めての場合）
install.packages("haven")
# havenパッケージを読み込みます
library(haven)
chooseCRANmirror()
# 変数の作成と値の代入
変数名 <- 値
# Importing data from a SQLite database
library(DBI)
con <- dbConnect(RSQLite::SQLite(), "database.sqlite")
# Install RSQLite and RMySQL packages if they are not installed
if (!require(RSQLite)) {
install.packages("RSQLite")
}
if (!require(RMySQL)) {
install.packages("RMySQL")
}
# Now we can load these libraries
# Importing data from a SQLite database
library(DBI)
library(RSQLite)
con <- dbConnect(RSQLite::SQLite(), "database.sqlite")
data <- dbReadTable(con, "table_name")
# Install RSQLite and RMySQL packages if they are not installed
if (!require(RSQLite)) {
install.packages("RSQLite")
}
if (!require(RMySQL)) {
install.packages("RMySQL")
}
# Now we can load these libraries
# Importing data from a SQLite database
library(DBI)
library(RSQLite)
con <- dbConnect(RSQLite::SQLite(), "database.sqlite")
data <- dbReadTable(con, "table_name")
# Load the haven package
library(haven)
# Get the path of the SAS file
path <- system.file("examples", "iris.sas7bdat", package = "haven")
# Read the SAS file
# read_sas function reads a SAS file and creates a data frame.
data <- read_sas(path)
# Display the first part of the data frame
head(data)
# Install RSQLite and RMySQL packages if they are not installed
if (!require(RSQLite)) {
install.packages("RSQLite")
}
if (!require(RMySQL)) {
install.packages("RMySQL")
}
# Now we can load these libraries
# Importing data from a SQLite database
library(DBI)
library(RSQLite)
con <- dbConnect(RSQLite::SQLite(), "database.sqlite")
data <- dbReadTable(con, "table_name")
# Generating an HTML report with RMarkdown
---
title: "My Report"
# Installing the ggplot2 package in R
install.packages("ggplot2")
# Loading the ggplot2 package in R
library(ggplot2)
# Installing the ggplot2 package in R
if (!require(ggplot2)) {
install.packages("ggplot2")
# Loading the ggplot2 package in R
library(ggplot2)
# Installing the ggplot2 package in R
if (!require(ggplot2)) {
install.packages("ggplot2")
# Loading the ggplot2 package in R
library(ggplot2)
# Installing the ggplot2 package in R
if (!require(ggplot2)) {
install.packages("ggplot2")
# Loading the ggplot2 package in R
library(ggplot2)
# Installing the ggplot2 package in R
if (!require(ggplot2)) {
install.packages("ggplot2")
# Loading the ggplot2 package in R
library(ggplot2)
# Installing the ggplot2 package in R
if (!require(ggplot2)) {
install.packages("ggplot2")
# Loading the ggplot2 package in R
library(ggplot2)
# Installing the ggplot2 package in R
if (!require(ggplot2)) {
install.packages("ggplot2")
# Load the package again after installation
library(ggplot2)
} else {
# Package is already installed, so just load it
library(ggplot2)
}
# Installing the ggplot2 package in R
if (!require(ggplot2)) {
install.packages("ggplot2")
# Load the package again after installation
library(ggplot2)
} else {
# Package is already installed, so just load it
library(ggplot2)
}
# Handling missing values in R
clean_data <- na.omit(data)
# Handling outliers in R
clean_data <- data[!(data$variable > threshold), ]
# Handling missing values in R
clean_data <- na.omit(data)
# Handling outliers in R
threshold <- 10 # Define the threshold value
clean_data <- data[!(data$variable > threshold), ]
# Handling missing values in R
clean_data <- na.omit(data)
# Handling outliers in R
threshold <- 10 # Define the threshold value
clean_data <- data[!(data$variable > threshold), ]
# Check if RSQLite is installed; if not, install it
if (!require(RSQLite)) {
install.packages("RSQLite")
}
# Check if RMySQL is installed; if not, install it
if (!require(RMySQL)) {
install.packages("RMySQL")
}
# Load the required libraries
library(DBI)
library(RSQLite)
# Connect to the SQLite database
con <- dbConnect(RSQLite::SQLite(), "database.sqlite")
# Read the table named "employees" from the database
data <- dbReadTable(con, "employees")
# Load the RMySQL library
library(RMySQL)
# Attempt to connect to the MySQL database
con <- dbConnect(RMySQL::MySQL(), host = "localhost", user = "your_mysql_username", password = "your_mysql_password", dbname = "test_db")
# Installing the ggplot2 package in R
if (!require(ggplot2)) {
install.packages("ggplot2")
# Load the package again after installation
library(ggplot2)
} else {
# Package is already installed, so just load it
library(ggplot2)
}
# Installing the ggplot2 package in R
if (!require(ggplot2)) {
install.packages("ggplot2")
# Load the package again after installation
library(ggplot2)
} else {
# Package is already installed, so just load it
library(ggplot2)
}
# Installing the ggplot2 package in R
if (!require(ggplot2)) {
install.packages("ggplot2")
# Load the package again after installation
library(ggplot2)
} else {
# Package is already installed, so just load it
library(ggplot2)
}
# Handling missing values in R
clean_data <- na.omit(data)
# Handling outliers in R
/clean_data <- data[!(data$variable > threshold), ]
# The na.omit() function is used to remove any rows in the data that contain missing values
clean_data <- na.omit(data)
# Define an upper threshold for the 'variable' column
threshold <- 100  # Please replace this value with an appropriate threshold for your data and analysis
# Remove any rows where 'variable' is greater than the threshold
clean_data <- data[!(data$variable > threshold), ]
# Creating a new variable in R
data$new_variable <- data$variable1 + data$variable2
# Create a new variable 'new_variable' as the sum of 'variable1' and 'variable2'
data$new_variable <- data$variable1 + data$variable2
# Define a threshold for recoding the 'variable'
threshold <- 100  # This is just a placeholder value, please replace it with an appropriate threshold for your data and analysis
# Recode 'variable' based on the defined threshold.
# If the value of 'variable' is greater than the threshold, it's recoded as "high". Otherwise, it's recoded as "low".
data$recoded_variable <- ifelse(data$variable > threshold, "high", "low")
# Define a threshold for recoding the 'variable'
threshold <- 100  # This is just a placeholder value, please replace it with an appropriate threshold for your data and analysis
# Recode 'variable' based on the defined threshold.
# If the value of 'variable' is greater than the threshold, it's recoded as "high". Otherwise, it's recoded as "low".
data$recoded_variable <- ifelse(data$variable > threshold, "high", "low")
オブジェクト名 <- mpg
mpg%>%
# 列の絞り込み
select(manufacturer, model, displ, year, cyl) %>%
# 行の絞り込み
filter(manufacturer == "audi") %>%
# 新しい列を作成
mutate(century = ceiling(year / 100))
mpg_filtered <- mpg %>%
# 列の絞り込み
select(manufacturer, model, displ, year, cyl) %>%
# 行の絞り込み
filter(manufacturer == "audi") %>%
# 新しい列を作成
mutate(century = ceiling(year / 100))
head(mpg_filtered)
library(dplyr)
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
library("dplyr")
data(mpg)
install.packages("dplyr")
install.packages("dplyr")
library("dplyr")
data(mpg)
data("mpg")
data(mpg)
install.packages("ggplot2")
library(ggplot2)
data(mpg)
mpg_filtered <- mpg %>%
# 列の絞り込み
select(manufacturer, model, displ, year, cyl) %>%
# 行の絞り込み
filter(manufacturer == "audi") %>%
# 新しい列を作成
mutate(century = ceiling(year / 100))
head(mpg_filtered)
# エラーを発生させるコード例
unknown_function()
mpg_solution <- mpg %>%
select(manufacturer, model, year, class) %>%  # 列の絞り込み
arrange(desc(year)) %>%  # year列を降順に並び替え
select(class, manufacturer, year, model)  # 列の並び替え
head(mpg_solution)
